/**
 * OmniZap - Sistema de Automa√ß√£o WhatsApp
 *
 * Sistema profissional para automa√ß√£o e gerenciamento de mensagens WhatsApp
 * Desenvolvido com tecnologia Baileys para m√°xima compatibilidade
 *
 * @version 1.0.5
 * @author OmniZap Team
 * @license MIT
 */

const OmniZapMessageProcessor = require('./app/controllers/messageController');
const { eventHandler } = require('./app/events/eventHandler');
const logger = require('./app/utils/logger/loggerModule');
const db = require('./app/database/mysql');

/**
 * Processador principal de mensagens do OmniZap
 *
 * @param {Object} messageUpdate - Atualiza√ß√£o de mensagens recebidas
 * @param {Object} whatsappClient - Cliente WhatsApp ativo
 * @param {String} qrCodePath - Caminho do QR Code para autentica√ß√£o (opcional)
 * @param {Object} socketController - Refer√™ncia ao controlador de socket (opcional)
 * @returns {Promise<void>}
 */
const OmniZapMainHandler = async (messageUpdate, whatsappClient, qrCodePath = null, socketController = null) => {
  try {
    // Registrar in√≠cio do processamento principal
    logger.info('üéØ OmniZap: Iniciando processamento principal', {
      messageCount: messageUpdate?.messages?.length || 0,
      hasSocketController: !!socketController,
      hasEventHandler: !!eventHandler,
      qrCodePath: qrCodePath || 'n√£o especificado',
    });

    // Garantir que o eventHandler esteja configurado
    if (eventHandler && whatsappClient) {
      eventHandler.setWhatsAppClient(whatsappClient);
    }

    // Processar mensagens com todas as integra√ß√µes
    await OmniZapMessageProcessor(messageUpdate, whatsappClient, socketController);

    logger.debug('üéØ OmniZap: Processamento principal conclu√≠do com sucesso');
  } catch (error) {
    logger.error('‚ùå OmniZap: Erro no processamento principal:', {
      error: error.message,
      stack: error.stack,
      messageCount: messageUpdate?.messages?.length || 0,
    });

    // Registrar erro no eventHandler
    if (eventHandler) {
      eventHandler.processGenericEvent('main.handler.error', {
        error: error.message,
        timestamp: Date.now(),
        messageCount: messageUpdate?.messages?.length || 0,
      });
    }

    throw error;
  }
};

if (require.main === module) {
  logger.info('üîå Iniciando OmniZap System...');

  // Registrar in√≠cio da aplica√ß√£o no eventHandler
  if (eventHandler) {
    eventHandler.processGenericEvent('application.startup', {
      timestamp: Date.now(),
      version: '1.0.5',
      nodeVersion: process.version,
    });
  }

  db.init()
    .then((initialized) => {
      if (initialized) {
        logger.info('üíæ Banco de dados MySQL inicializado com sucesso');

        // Registrar sucesso da inicializa√ß√£o do banco
        if (eventHandler) {
          eventHandler.processGenericEvent('database.initialized', {
            type: 'mysql',
            status: 'success',
            timestamp: Date.now(),
          });
        }
      } else {
        logger.warn('‚ö†Ô∏è Banco de dados MySQL n√£o inicializado. Apenas armazenamento em mem√≥ria dispon√≠vel.');

        // Registrar falha na inicializa√ß√£o do banco
        if (eventHandler) {
          eventHandler.processGenericEvent('database.initialization.failed', {
            type: 'mysql',
            fallback: 'memory',
            timestamp: Date.now(),
          });
        }
      }

      // Inicializar socketController
      logger.info('üîó Iniciando controlador de conex√£o...');
      require('./app/connection/socketController');
    })
    .catch((error) => {
      logger.error('‚ùå Erro ao inicializar banco de dados:', {
        error: error.message,
        stack: error.stack,
      });

      // Registrar erro cr√≠tico no eventHandler
      if (eventHandler) {
        eventHandler.processGenericEvent('database.critical.error', {
          error: error.message,
          timestamp: Date.now(),
        });
      }

      logger.info('üîÑ Iniciando sem banco de dados...');
      require('./app/connection/socketController');
    });
}

module.exports = OmniZapMainHandler;
