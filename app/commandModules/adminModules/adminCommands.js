/**
 * OmniZap Admin Commands
 *
 * Comandos de administra√ß√£o para grupos do WhatsApp
 * Usando dados centralizados do socket na pasta data
 *
 * @version 1.5.0
 * @author OmniZap Team
 * @license MIT
 * @source https://www.npmjs.com/package/baileys
 *
 */

const logger = require('../../utils/logger/loggerModule');
const { formatErrorMessage } = require('../../utils/messageUtils');
const { isUserAdmin, isBotAdmin, isUserInGroup, formatPhoneToJid, getGroupMetadata, logGroupActivity, cleanJid, getValidParticipants } = require('../../utils/groupGlobalUtils');
const fs = require('fs').promises;
const path = require('path');
const BANNED_USERS_FILE = path.join(__dirname, '../../../temp/data/banned_users.json');

/**
 * === FUN√á√ïES DE SISTEMA DE BANIMENTO ===
 */

/**
 * Carrega a lista de usu√°rios banidos
 * @returns {Promise<Object>} - Lista de usu√°rios banidos
 */
const loadBannedUsersList = async () => {
  try {
    const data = await fs.readFile(BANNED_USERS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    if (error.code === 'ENOENT') {
      const defaultStructure = {
        users: [],
        groupBans: {},
        lastUpdated: Date.now(),
      };
      try {
        await fs.writeFile(BANNED_USERS_FILE, JSON.stringify(defaultStructure, null, 2), 'utf8');
      } catch (writeError) {
        logger.warn('Erro ao criar arquivo de banimentos', { error: writeError.message });
      }

      return defaultStructure;
    }
    logger.error('Erro ao carregar lista de banidos', { error: error.message });
    return { users: [], groupBans: {}, lastUpdated: Date.now() };
  }
};

/**
 * Salva a lista de usu√°rios banidos
 * @param {Object} bannedData - Dados de banimento
 * @returns {Promise<void>}
 */
const saveBannedUsersList = async (bannedData) => {
  try {
    bannedData.lastUpdated = Date.now();
    await fs.writeFile(BANNED_USERS_FILE, JSON.stringify(bannedData, null, 2), 'utf8');
    logger.debug('Lista de banimentos salva com sucesso');
  } catch (error) {
    logger.error('Erro ao salvar lista de banimentos', { error: error.message });
  }
};

/**
 * Adiciona um usu√°rio √† lista de banidos
 * @param {string} userJid - JID do usu√°rio
 * @param {string} groupJid - JID do grupo
 * @param {string} executorJid - JID do executor do banimento
 * @param {string} reason - Motivo do banimento
 * @returns {Promise<void>}
 */
const addUserToBannedList = async (userJid, groupJid, executorJid, reason) => {
  try {
    const bannedData = await loadBannedUsersList();

    const banEntry = {
      userJid,
      groupJid,
      executorJid,
      reason,
      timestamp: Date.now(),
      formattedDate: new Date().toLocaleString('pt-BR'),
    };

    bannedData.users.push(banEntry);

    if (!bannedData.groupBans[groupJid]) {
      bannedData.groupBans[groupJid] = [];
    }
    bannedData.groupBans[groupJid].push(banEntry);

    await saveBannedUsersList(bannedData);

    logger.info('Usu√°rio adicionado √† lista de banimentos', {
      userJid,
      groupJid,
      executorJid,
      reason,
    });
  } catch (error) {
    logger.error('Erro ao adicionar usu√°rio √† lista de banimentos', {
      error: error.message,
      userJid,
      groupJid,
      executorJid,
      reason,
    });
  }
};

/**
 * Obt√©m hist√≥rico de banimentos de um grupo
 * @param {string} groupJid - JID do grupo
 * @returns {Promise<Array>} - Lista de banimentos do grupo
 */
const getGroupBanHistory = async (groupJid) => {
  try {
    const bannedData = await loadBannedUsersList();
    return bannedData.groupBans[groupJid] || [];
  } catch (error) {
    logger.error('Erro ao obter hist√≥rico de banimentos do grupo', {
      error: error.message,
      groupJid,
    });
    return [];
  }
};

/**
 * Obt√©m hist√≥rico de banimentos de um usu√°rio
 * @param {string} userJid - JID do usu√°rio
 * @returns {Promise<Array>} - Lista de banimentos do usu√°rio
 */
const getUserBanHistory = async (userJid) => {
  try {
    const bannedData = await loadBannedUsersList();
    return bannedData.users.filter((ban) => ban.userJid === userJid);
  } catch (error) {
    logger.error('Erro ao obter hist√≥rico de banimentos do usu√°rio', {
      error: error.message,
      userJid,
    });
    return [];
  }
};

/**
 * Verifica se um usu√°rio est√° banido em um grupo
 * @param {string} userJid - JID do usu√°rio
 * @param {string} groupJid - JID do grupo
 * @returns {Promise<boolean>} - True se o usu√°rio est√° banido
 */
const isUserBanned = async (userJid, groupJid) => {
  try {
    const groupBans = await getGroupBanHistory(groupJid);
    return groupBans.some((ban) => ban.userJid === userJid);
  } catch (error) {
    logger.error('Erro ao verificar se usu√°rio est√° banido', {
      error: error.message,
      userJid,
      groupJid,
    });
    return false;
  }
};

/**
 * === FUN√á√ïES AUXILIARES ===
 */

/**
 * Valida se o comando pode ser executado (permiss√µes de grupo e admin)
 * @param {string} groupJid - JID do grupo
 * @param {string} senderJid - JID do remetente
 * @param {boolean} requiresBotAdmin - Se o bot precisa ser admin (padr√£o: true)
 * @returns {Promise<Object|null>} - Retorna erro se inv√°lido, null se v√°lido
 */
const validateAdminCommand = async (groupJid, senderJid, requiresBotAdmin = true) => {
  if (!groupJid) {
    return {
      success: false,
      message: formatErrorMessage('Comando s√≥ dispon√≠vel em grupos', 'Este comando s√≥ pode ser utilizado dentro de grupos.', null),
    };
  }

  if (requiresBotAdmin) {
    const botIsAdmin = await isBotAdmin(groupJid);
    if (!botIsAdmin) {
      return {
        success: false,
        message: formatErrorMessage('Permiss√£o negada', 'O bot precisa ser administrador do grupo para executar esta a√ß√£o.', null),
      };
    }
  }

  const senderIsAdmin = await isUserAdmin(groupJid, senderJid);
  if (!senderIsAdmin) {
    return {
      success: false,
      message: formatErrorMessage('Permiss√£o negada', 'Apenas administradores podem usar este comando.', null),
    };
  }

  return null;
};

/**
 * Processa comando para adicionar participantes ao grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando (n√∫meros a adicionar)
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processAddCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando add', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    if (!args || !args.trim()) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve fornecer pelo menos um n√∫mero para adicionar ao grupo.', null),
      };
    }

    const numbers = args.split(/[\s,;]+/).filter((n) => n.trim());
    if (numbers.length === 0) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros inv√°lidos', 'N√∫meros inv√°lidos fornecidos.', 'üìã *Como usar:*\n!add 551199999999 551188888888...'),
      };
    }

    const participants = numbers.map((number) => formatPhoneToJid(number));

    logger.info(`Adicionando participantes ao grupo ${groupJid}`, { participants });

    const result = await omniZapClient.groupParticipantsUpdate(groupJid, participants, 'add');

    const successCount = result.filter((r) => r.status === '200').length;
    const failedCount = result.length - successCount;

    try {
      const eventLog = {
        type: 'add_participants',
        groupJid,
        executorJid: senderJid,
        participants,
        result,
        timestamp: Date.now(),
      };
      logger.info('Evento de adi√ß√£o de participantes registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    let responseMessage = '';
    if (successCount > 0) {
      responseMessage += `‚úÖ *${successCount} participante(s) adicionado(s) com sucesso*\n\n`;
    }

    if (failedCount > 0) {
      responseMessage += `‚ùå *${failedCount} participante(s) n√£o puderam ser adicionados*\n\nPoss√≠veis motivos:\n‚Ä¢ Privacidade do usu√°rio n√£o permite\n‚Ä¢ N√∫mero inv√°lido\n‚Ä¢ Usu√°rio j√° est√° no grupo\n‚Ä¢ Usu√°rio bloqueou o bot`;
    } else {
      responseMessage += `üë• *Todos os participantes foram adicionados com sucesso!*`;
    }

    return {
      success: true,
      message: responseMessage,
    };
  } catch (error) {
    logger.error('Erro ao processar comando add', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao adicionar participantes', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para promover participantes a administradores
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processPromoteCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando promote', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    let targetUsers = [];

    if (messageInfo.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      const quotedParticipant = messageInfo.message.extendedTextMessage.contextInfo.participant;
      targetUsers.push(quotedParticipant);
    } else {
      if (!args || !args.trim()) {
        return {
          success: false,
          message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve mencionar um usu√°rio ou fornecer o n√∫mero.', 'üìã *Como usar:*\n‚Ä¢ Responda a uma mensagem com: !promote\n‚Ä¢ Ou envie: !promote n√∫mero1 n√∫mero2...'),
        };
      }

      const numbers = args.split(/[\s,;]+/).filter((n) => n.trim());
      if (numbers.length === 0) {
        return {
          success: false,
          message: formatErrorMessage('Par√¢metros inv√°lidos', 'N√∫meros inv√°lidos fornecidos.', 'üìã *Como usar:*\n!promote 551199999999 551188888888...'),
        };
      }

      targetUsers = numbers.map((number) => formatPhoneToJid(number));
    }

    const groupMetadata = await getGroupMetadata(groupJid);
    const participants = groupMetadata?.participants || [];

    const invalidUsers = [];
    const validUsers = [];

    for (const user of targetUsers) {
      const cleanUserJid = cleanJid(user);
      const validParticipants = getValidParticipants(participants);
      const isInGroup = validParticipants.some((p) => cleanJid(p.id) === cleanUserJid);

      if (isInGroup) {
        validUsers.push(user);
      } else {
        invalidUsers.push(user);
      }
    }

    if (validUsers.length === 0) {
      return {
        success: false,
        message: formatErrorMessage('Usu√°rios n√£o encontrados', 'Nenhum dos usu√°rios especificados est√° no grupo.', null),
      };
    }

    logger.info(`Promovendo usu√°rios a administradores no grupo ${groupJid}`, { validUsers });

    await omniZapClient.groupParticipantsUpdate(groupJid, validUsers, 'promote');

    await logGroupActivity(groupJid, 'promote_action', {
      executorJid: senderJid,
      targetUsers: validUsers,
      count: validUsers.length,
    });

    try {
      const eventLog = {
        type: 'promote_participants',
        groupJid,
        executorJid: senderJid,
        promotedUsers: validUsers,
        timestamp: Date.now(),
      };
      logger.info('Evento de promo√ß√£o de participantes registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    let responseMessage = `‚úÖ *${validUsers.length} usu√°rio(s) promovido(s) a administrador com sucesso*\n\n`;

    if (invalidUsers.length > 0) {
      responseMessage += `‚ö†Ô∏è *${invalidUsers.length} usu√°rio(s) n√£o foram encontrados no grupo*`;
    }

    return {
      success: true,
      message: responseMessage,
    };
  } catch (error) {
    logger.error('Erro ao processar comando promote', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao promover usu√°rios', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para rebaixar administradores para participantes comuns
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processDemoteCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando demote', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    let targetUsers = [];

    if (messageInfo.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      const quotedParticipant = messageInfo.message.extendedTextMessage.contextInfo.participant;
      targetUsers.push(quotedParticipant);
    } else {
      if (!args || !args.trim()) {
        return {
          success: false,
          message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve mencionar um usu√°rio ou fornecer o n√∫mero.', 'üìã *Como usar:*\n‚Ä¢ Responda a uma mensagem com: !demote\n‚Ä¢ Ou envie: !demote n√∫mero1 n√∫mero2...'),
        };
      }

      const numbers = args.split(/[\s,;]+/).filter((n) => n.trim());
      if (numbers.length === 0) {
        return {
          success: false,
          message: formatErrorMessage('Par√¢metros inv√°lidos', 'N√∫meros inv√°lidos fornecidos.', 'üìã *Como usar:*\n!demote 551199999999 551188888888...'),
        };
      }

      targetUsers = numbers.map((number) => formatPhoneToJid(number));
    }

    const groupMetadata = await getGroupMetadata(groupJid);
    const participants = groupMetadata?.participants || [];

    const invalidUsers = [];
    const notAdminUsers = [];
    const validUsers = [];

    for (const user of targetUsers) {
      const cleanUserJid = cleanJid(user);
      const validParticipants = getValidParticipants(participants);
      const participant = validParticipants.find((p) => cleanJid(p.id) === cleanUserJid);

      if (!participant) {
        invalidUsers.push(user);
      } else if (!['admin', 'superadmin'].includes(participant.admin)) {
        notAdminUsers.push(user);
      } else {
        validUsers.push(user);
      }
    }

    if (validUsers.length === 0) {
      let errorMessage = 'N√£o foi poss√≠vel rebaixar os usu√°rios especificados.';

      if (invalidUsers.length > 0) {
        errorMessage += ' Alguns usu√°rios n√£o est√£o no grupo.';
      }

      if (notAdminUsers.length > 0) {
        errorMessage += ' Alguns usu√°rios n√£o s√£o administradores.';
      }

      return {
        success: false,
        message: formatErrorMessage('Opera√ß√£o n√£o permitida', errorMessage, null),
      };
    }

    logger.info(`Rebaixando administradores no grupo ${groupJid}`, { validUsers });

    await omniZapClient.groupParticipantsUpdate(groupJid, validUsers, 'demote');

    try {
      const eventLog = {
        type: 'demote_participants',
        groupJid,
        executorJid: senderJid,
        demotedUsers: validUsers,
        timestamp: Date.now(),
      };
      logger.info('Evento de rebaixamento de participantes registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    let responseMessage = `‚úÖ *${validUsers.length} administrador(es) rebaixado(s) com sucesso*\n\n`;

    if (invalidUsers.length > 0 || notAdminUsers.length > 0) {
      responseMessage += `‚ö†Ô∏è *Informa√ß√µes adicionais:*\n`;

      if (invalidUsers.length > 0) {
        responseMessage += `‚Ä¢ ${invalidUsers.length} usu√°rio(s) n√£o encontrados no grupo\n`;
      }

      if (notAdminUsers.length > 0) {
        responseMessage += `‚Ä¢ ${notAdminUsers.length} usu√°rio(s) j√° n√£o eram administradores`;
      }
    }

    return {
      success: true,
      message: responseMessage,
    };
  } catch (error) {
    logger.error('Erro ao processar comando demote', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao rebaixar administradores', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para alterar o nome do grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando (novo nome)
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processSetNameCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando setname', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    if (!args || !args.trim()) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve fornecer o novo nome para o grupo.', 'üìã *Como usar:*\n!setname Novo Nome do Grupo'),
      };
    }

    const newName = args.trim();

    if (newName.length > 128) {
      return {
        success: false,
        message: formatErrorMessage('Nome muito longo', 'O nome do grupo n√£o pode exceder 128 caracteres.', null),
      };
    }

    logger.info(`Alterando nome do grupo ${groupJid} para "${newName}"`, { oldGroupJid: groupJid });

    await omniZapClient.groupUpdateSubject(groupJid, newName);

    try {
      const oldGroupMetadata = await getGroupMetadata(groupJid);
      const oldName = oldGroupMetadata?.subject || 'Desconhecido';

      const eventLog = {
        type: 'change_group_name',
        groupJid,
        executorJid: senderJid,
        oldName,
        newName,
        timestamp: Date.now(),
      };
      logger.info('Evento de altera√ß√£o de nome do grupo registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    return {
      success: true,
      message: `‚úÖ *Nome do grupo alterado com sucesso*\n\nüìù *Novo nome:* ${newName}`,
    };
  } catch (error) {
    logger.error('Erro ao processar comando setname', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao alterar nome do grupo', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para alterar a descri√ß√£o do grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando (nova descri√ß√£o)
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processSetDescCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando setdesc', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    if (!args) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve fornecer a nova descri√ß√£o para o grupo.', 'üìã *Como usar:*\n!setdesc Nova descri√ß√£o do grupo\n\nOu deixe vazio para remover: !setdesc'),
      };
    }

    const newDesc = args.trim();

    if (newDesc.length > 512) {
      return {
        success: false,
        message: formatErrorMessage('Descri√ß√£o muito longa', 'A descri√ß√£o do grupo n√£o pode exceder 512 caracteres.', null),
      };
    }

    logger.info(`Alterando descri√ß√£o do grupo ${groupJid}`, { descLength: newDesc.length });

    await omniZapClient.groupUpdateDescription(groupJid, newDesc);

    try {
      const oldGroupMetadata = await getGroupMetadata(groupJid);
      const oldDesc = oldGroupMetadata?.desc || '';

      const eventLog = {
        type: 'change_group_desc',
        groupJid,
        executorJid: senderJid,
        oldDesc,
        newDesc,
        timestamp: Date.now(),
      };
      logger.info('Evento de altera√ß√£o de descri√ß√£o do grupo registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    return {
      success: true,
      message: newDesc ? `‚úÖ *Descri√ß√£o do grupo alterada com sucesso*\n\nüìù *Nova descri√ß√£o:*\n${newDesc}` : `‚úÖ *Descri√ß√£o do grupo removida com sucesso*`,
    };
  } catch (error) {
    logger.error('Erro ao processar comando setdesc', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao alterar descri√ß√£o do grupo', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para configurar o grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processGroupSettingCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando group', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    if (!args || !args.trim()) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve especificar uma a√ß√£o.', 'üìã *Como usar:*\n!group close - Somente admins podem enviar mensagens\n!group open - Todos podem enviar mensagens\n!group lock - Somente admins podem modificar o grupo\n!group unlock - Todos podem modificar o grupo'),
      };
    }

    const action = args.trim().toLowerCase();
    let setting = '';
    let description = '';

    switch (action) {
      case 'close':
      case 'fechar':
        setting = 'announcement';
        description = 'Somente administradores podem enviar mensagens';
        break;
      case 'open':
      case 'abrir':
        setting = 'not_announcement';
        description = 'Todos os participantes podem enviar mensagens';
        break;
      case 'lock':
      case 'trancar':
      case 'bloquear':
        setting = 'locked';
        description = 'Somente administradores podem modificar as configura√ß√µes do grupo';
        break;
      case 'unlock':
      case 'destrancar':
      case 'desbloquear':
        setting = 'unlocked';
        description = 'Todos os participantes podem modificar as configura√ß√µes do grupo';
        break;
      default:
        return {
          success: false,
          message: formatErrorMessage('A√ß√£o inv√°lida', 'A√ß√£o n√£o reconhecida.', 'üìã *A√ß√µes dispon√≠veis:*\n‚Ä¢ close/fechar - Somente admins enviam mensagens\n‚Ä¢ open/abrir - Todos enviam mensagens\n‚Ä¢ lock/trancar - Somente admins modificam o grupo\n‚Ä¢ unlock/destrancar - Todos modificam o grupo'),
        };
    }

    logger.info(`Alterando configura√ß√µes do grupo ${groupJid} para "${setting}"`, { action });

    await omniZapClient.groupSettingUpdate(groupJid, setting);

    try {
      const eventLog = {
        type: 'change_group_setting',
        groupJid,
        executorJid: senderJid,
        setting,
        action,
        timestamp: Date.now(),
      };
      logger.info('Evento de altera√ß√£o de configura√ß√£o do grupo registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    return {
      success: true,
      message: `‚úÖ *Configura√ß√µes do grupo atualizadas*\n\nüìù *Nova configura√ß√£o:* ${description}`,
    };
  } catch (error) {
    logger.error('Erro ao processar comando group', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao alterar configura√ß√µes do grupo', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para obter o link de convite do grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processLinkCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando link', { senderJid, groupJid, args });

  try {
    if (!groupJid) {
      return {
        success: false,
        message: formatErrorMessage('Comando s√≥ dispon√≠vel em grupos', 'Este comando s√≥ pode ser utilizado dentro de grupos.', null),
      };
    }
    const botIsAdmin = await isBotAdmin(groupJid);
    if (!botIsAdmin) {
      return {
        success: false,
        message: formatErrorMessage('Permiss√£o negada', 'O bot precisa ser administrador do grupo para executar esta a√ß√£o.', null),
      };
    }
    const senderIsAdmin = await isUserAdmin(groupJid, senderJid);
    if (!senderIsAdmin) {
      return {
        success: false,
        message: formatErrorMessage('Permiss√£o negada', 'Apenas administradores podem usar este comando.', null),
      };
    }

    const shouldReset = args && ['reset', 'revoke', 'new', 'novo', 'resetar', 'revogar'].includes(args.trim().toLowerCase());

    let code;
    if (shouldReset) {
      logger.info(`Revogando e gerando novo link de convite para o grupo ${groupJid}`);
      code = await omniZapClient.groupRevokeInvite(groupJid);

      try {
        const eventLog = {
          type: 'revoke_group_link',
          groupJid,
          executorJid: senderJid,
          timestamp: Date.now(),
        };
        logger.info('Evento de revoga√ß√£o de link do grupo registrado', eventLog);
      } catch (logError) {
        logger.warn('Erro ao registrar log do evento', { error: logError.message });
      }
    } else {
      logger.info(`Obtendo link de convite para o grupo ${groupJid}`);
      code = await omniZapClient.groupInviteCode(groupJid);
    }

    const inviteLink = `https://chat.whatsapp.com/${code}`;

    return {
      success: true,
      message: shouldReset ? `üîÑ *Link do grupo foi redefinido*\n\nüîó *Novo link:*\n${inviteLink}` : `üîó *Link do grupo:*\n${inviteLink}${senderIsAdmin ? '\n\n_Use !link reset para gerar um novo link_' : ''}`,
    };
  } catch (error) {
    logger.error('Erro ao processar comando link', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao obter link do grupo', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para definir o modo de mensagens tempor√°rias (ef√™meras)
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processEphemeralCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando ephemeral', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    if (!args || !args.trim()) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve especificar uma dura√ß√£o.', 'üìã *Como usar:*\n!ephemeral off - Desativar mensagens tempor√°rias\n!ephemeral 24h - Mensagens somem em 24 horas\n!ephemeral 7d - Mensagens somem em 7 dias\n!ephemeral 90d - Mensagens somem em 90 dias'),
      };
    }

    const duration = args.trim().toLowerCase();
    let seconds = 0;
    let durationText = '';

    switch (duration) {
      case 'off':
      case 'disable':
      case 'desativar':
      case 'desligado':
        seconds = 0;
        durationText = 'Desativado';
        break;
      case '24h':
      case '24 horas':
      case '1d':
      case '1 dia':
        seconds = 86400; // 24 horas
        durationText = '24 horas';
        break;
      case '7d':
      case '7 dias':
      case '1w':
      case '1 semana':
        seconds = 604800; // 7 dias
        durationText = '7 dias';
        break;
      case '90d':
      case '90 dias':
      case '3m':
      case '3 meses':
        seconds = 7776000; // 90 dias
        durationText = '90 dias';
        break;
      default:
        return {
          success: false,
          message: formatErrorMessage('Dura√ß√£o inv√°lida', 'Dura√ß√£o n√£o reconhecida.', 'üìã *Dura√ß√µes dispon√≠veis:*\n‚Ä¢ off - Desativar mensagens tempor√°rias\n‚Ä¢ 24h - Mensagens somem em 24 horas\n‚Ä¢ 7d - Mensagens somem em 7 dias\n‚Ä¢ 90d - Mensagens somem em 90 dias'),
        };
    }

    logger.info(`Configurando mensagens ef√™meras no grupo ${groupJid} para ${seconds} segundos`);

    await omniZapClient.groupToggleEphemeral(groupJid, seconds);

    try {
      const eventLog = {
        type: 'set_ephemeral',
        groupJid,
        executorJid: senderJid,
        seconds,
        duration,
        timestamp: Date.now(),
      };
      logger.info('Evento de configura√ß√£o de mensagens ef√™meras registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    const responseMessage = seconds === 0 ? `‚úÖ *Mensagens tempor√°rias desativadas*\n\nAs mensagens n√£o desaparecer√£o automaticamente.` : `‚úÖ *Mensagens tempor√°rias ativadas*\n\n‚è±Ô∏è *Dura√ß√£o:* ${durationText}\n\nAs novas mensagens desaparecer√£o automaticamente ap√≥s ${durationText}.`;

    return {
      success: true,
      message: responseMessage,
    };
  } catch (error) {
    logger.error('Erro ao processar comando ephemeral', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao configurar mensagens tempor√°rias', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para definir o modo de adi√ß√£o ao grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processAddModeCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando addmode', { senderJid, groupJid, args });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    if (!args || !args.trim()) {
      return {
        success: false,
        message: formatErrorMessage('Par√¢metros insuficientes', 'Voc√™ deve especificar um modo.', 'üìã *Como usar:*\n!addmode all - Todos podem adicionar participantes\n!addmode admin - Somente admins podem adicionar participantes'),
      };
    }

    const mode = args.trim().toLowerCase();
    let settingMode = '';
    let description = '';

    switch (mode) {
      case 'all':
      case 'everyone':
      case 'todos':
      case 'cualquiera':
        settingMode = 'all_member_add';
        description = 'Todos os participantes podem adicionar novos membros';
        break;
      case 'admin':
      case 'admins':
      case 'administradores':
        settingMode = 'admin_add';
        description = 'Somente administradores podem adicionar novos membros';
        break;
      default:
        return {
          success: false,
          message: formatErrorMessage('Modo inv√°lido', 'Modo n√£o reconhecido.', 'üìã *Modos dispon√≠veis:*\n‚Ä¢ all/todos - Todos podem adicionar participantes\n‚Ä¢ admin/admins - Somente administradores podem adicionar participantes'),
        };
    }

    logger.info(`Configurando modo de adi√ß√£o de participantes no grupo ${groupJid} para ${settingMode}`);

    await omniZapClient.groupMemberAddMode(groupJid, settingMode);

    try {
      const eventLog = {
        type: 'set_add_mode',
        groupJid,
        executorJid: senderJid,
        mode: settingMode,
        timestamp: Date.now(),
      };
      logger.info('Evento de configura√ß√£o do modo de adi√ß√£o registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    return {
      success: true,
      message: `‚úÖ *Modo de adi√ß√£o atualizado*\n\nüìù *Nova configura√ß√£o:* ${description}`,
    };
  } catch (error) {
    logger.error('Erro ao processar comando addmode', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao configurar modo de adi√ß√£o', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa comando para obter informa√ß√µes do grupo
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processGroupInfoCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando groupinfo', { senderJid, groupJid, args });

  try {
    if (!groupJid) {
      return {
        success: false,
        message: formatErrorMessage('Comando s√≥ dispon√≠vel em grupos', 'Este comando s√≥ pode ser utilizado dentro de grupos.', null),
      };
    }

    const groupMetadata = await getGroupMetadata(groupJid);
    if (!groupMetadata) {
      return {
        success: false,
        message: formatErrorMessage('Erro ao obter informa√ß√µes', 'N√£o foi poss√≠vel obter os metadados do grupo.', null),
      };
    }

    const { subject, desc, owner, participants = [], creation, restrict, announce, ephemeralDuration } = groupMetadata;
    const validParticipants = getValidParticipants(participants);
    const adminCount = validParticipants.filter((p) => ['admin', 'superadmin'].includes(p.admin)).length;
    const memberCount = validParticipants.length - adminCount;

    const creationDate = creation ? new Date(creation * 1000).toLocaleString('pt-BR') : 'Desconhecido';

    let ephemeralText = 'Desativado';
    if (ephemeralDuration) {
      if (ephemeralDuration === 86400) ephemeralText = '24 horas';
      else if (ephemeralDuration === 604800) ephemeralText = '7 dias';
      else if (ephemeralDuration === 7776000) ephemeralText = '90 dias';
      else ephemeralText = `${ephemeralDuration} segundos`;
    }

    const restrictText = restrict ? 'Somente admins podem editar' : 'Todos podem editar';
    const announceText = announce ? 'Somente admins podem enviar mensagens' : 'Todos podem enviar mensagens';

    let inviteLink = '';
    try {
      if (await isBotAdmin(groupJid)) {
        const code = await omniZapClient.groupInviteCode(groupJid);
        inviteLink = `\nüîó *Link de convite:* https://chat.whatsapp.com/${code}`;
      }
    } catch (error) {
      logger.warn('Erro ao obter link do grupo', { error: error.message, groupJid });
    }

    const infoMessage = `üìä *INFORMA√á√ïES DO GRUPO*\n\n` + `üìù *Nome:* ${subject}\n` + `üë• *Participantes:* ${validParticipants.length} (${adminCount} admins, ${memberCount} membros)\n` + `üëë *Criador:* ${owner ? '+' + owner.split('@')[0] : 'Desconhecido'}\n` + `üìÖ *Criado em:* ${creationDate}\n` + `‚öôÔ∏è *Configura√ß√µes:*\n` + `  ‚Ä¢ ${restrictText}\n` + `  ‚Ä¢ ${announceText}\n` + `‚è±Ô∏è *Mensagens tempor√°rias:* ${ephemeralText}` + `${inviteLink}\n\n` + `üìÑ *Descri√ß√£o:*\n${desc || 'Sem descri√ß√£o'}`;

    return {
      success: true,
      message: infoMessage,
    };
  } catch (error) {
    logger.error('Erro ao processar comando groupinfo', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao obter informa√ß√µes do grupo', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa o comando de banimento de usu√°rio
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processBanCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando de banimento', {
    senderJid,
    groupJid,
    args,
  });

  try {
    const adminValidation = await validateAdminCommand(groupJid, senderJid);
    if (adminValidation) {
      return adminValidation;
    }

    let targetUserJid = null;
    let banReason = 'Banido por um administrador';

    if (messageInfo.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      targetUserJid = messageInfo.message.extendedTextMessage.contextInfo.participant;

      if (args && args.trim()) {
        banReason = args.trim();
      }

      try {
        const quotedMessage = {
          id: messageInfo.message.extendedTextMessage.contextInfo.stanzaId,
          remoteJid: groupJid,
          participant: targetUserJid,
        };

        await omniZapClient.sendMessage(groupJid, { delete: quotedMessage });
        logger.info('Mensagem marcada apagada com sucesso', { quotedMessage });
      } catch (deleteError) {
        logger.error('Erro ao apagar mensagem marcada', {
          error: deleteError.message,
          stack: deleteError.stack,
        });
      }
    } else {
      if (!args || !args.trim()) {
        return {
          success: false,
          message: formatErrorMessage('Usu√°rio n√£o especificado', 'Voc√™ deve mencionar um usu√°rio ou responder a uma mensagem dele, ou fornecer o n√∫mero.', 'üìã *Como usar:*\n‚Ä¢ Responda a uma mensagem com: !ban motivo\n‚Ä¢ Ou envie: !ban n√∫mero motivo'),
        };
      }

      const argParts = args.split(' ');
      if (!argParts[0]) {
        return {
          success: false,
          message: formatErrorMessage('Usu√°rio n√£o especificado', 'Voc√™ deve mencionar um usu√°rio ou responder a uma mensagem dele, ou fornecer o n√∫mero.', 'üìã *Como usar:*\n‚Ä¢ Responda a uma mensagem com: !ban motivo\n‚Ä¢ Ou envie: !ban n√∫mero motivo'),
        };
      }

      targetUserJid = formatPhoneToJid(argParts[0]);
      if (argParts.length > 1) {
        banReason = argParts.slice(1).join(' ');
      }
    }

    const targetIsAdmin = await isUserAdmin(groupJid, targetUserJid);
    if (targetIsAdmin) {
      return {
        success: false,
        message: formatErrorMessage('Opera√ß√£o n√£o permitida', 'N√£o √© poss√≠vel banir outro administrador do grupo.', null),
      };
    }

    const userInGroup = await isUserInGroup(groupJid, targetUserJid);
    if (!userInGroup) {
      return {
        success: false,
        message: formatErrorMessage('Usu√°rio n√£o encontrado', 'O usu√°rio informado n√£o est√° no grupo.', null),
      };
    }

    logger.info(`Banindo usu√°rio ${targetUserJid} do grupo ${groupJid} - Motivo: ${banReason}`);
    await omniZapClient.groupParticipantsUpdate(groupJid, [targetUserJid], 'remove');

    try {
      const eventLog = {
        type: 'ban',
        groupJid,
        targetUserJid,
        executorJid: senderJid,
        reason: banReason,
        timestamp: Date.now(),
      };
      logger.info('Evento de banimento registrado', eventLog);
    } catch (logError) {
      logger.warn('Erro ao registrar log do evento', { error: logError.message });
    }

    const formattedNumber = targetUserJid.split('@')[0];

    await addUserToBannedList(targetUserJid, groupJid, senderJid, banReason);

    return {
      success: true,
      message: `‚úÖ *Usu√°rio banido com sucesso*\n\nüë§ *N√∫mero:* ${formattedNumber}\nüìù *Motivo:* ${banReason}\n\nüõ°Ô∏è A√ß√£o executada por administrador.`,
    };
  } catch (error) {
    logger.error('Erro ao processar comando de banimento', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao banir usu√°rio', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

/**
 * Processa o comando de listagem de banimentos
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processBanListCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando banlist', {
    senderJid,
    groupJid,
    args,
  });

  try {
    if (groupJid) {
      const senderIsAdmin = await isUserAdmin(groupJid, senderJid);
      if (!senderIsAdmin) {
        return {
          success: false,
          message: formatErrorMessage('Permiss√£o negada', 'Apenas administradores podem consultar a lista de banimentos.', null),
        };
      }
    }

    const argParts = args.split(' ');
    const subCommand = argParts[0]?.toLowerCase();

    if (!subCommand) {
      return {
        success: true,
        message: `üìã *Lista de Banimentos - Ajuda*\n\nüì± *Comandos dispon√≠veis:*\n‚Ä¢ \`grupo\` - Lista banimentos do grupo atual\n‚Ä¢ \`user n√∫mero\` - Busca hist√≥rico de banimento de um usu√°rio\n‚Ä¢ \`total\` - Estat√≠sticas de banimentos\n\n*Exemplo:* \`banlist grupo\``,
      };
    }

    switch (subCommand) {
      case 'grupo':
      case 'group':
        if (!groupJid) {
          return {
            success: false,
            message: formatErrorMessage('Erro', 'Este subcomando s√≥ pode ser usado dentro de grupos.', null),
          };
        }

        const groupBans = await getGroupBanHistory(groupJid);

        if (groupBans.length === 0) {
          return {
            success: true,
            message: 'üìã *Lista de Banimentos*\n\nNenhum banimento registrado neste grupo.',
          };
        }

        let banList = `üìã *Lista de Banimentos do Grupo*\n\n*Total:* ${groupBans.length} banimento(s)\n\n`;

        const recentBans = groupBans.slice(-10).reverse();

        for (const ban of recentBans) {
          const userNumber = ban.userJid.split('@')[0];
          const adminNumber = ban.executorJid.split('@')[0];

          banList += `üë§ *Usu√°rio:* ${userNumber}\nüìù *Motivo:* ${ban.reason}\nüïí *Data:* ${ban.formattedDate}\nüëÆ *Banido por:* ${adminNumber}\n\n`;
        }

        if (groupBans.length > 10) {
          banList += `_Mostrando os 10 banimentos mais recentes de ${groupBans.length} total._`;
        }

        return {
          success: true,
          message: banList,
        };

      case 'user':
      case 'usuario':
      case 'usu√°rio':
        const phoneNumber = argParts[1];
        if (!phoneNumber) {
          return {
            success: false,
            message: formatErrorMessage('Par√¢metro faltando', 'Voc√™ precisa fornecer o n√∫mero do usu√°rio.', 'üìã *Exemplo:* banlist user 5511999999999'),
          };
        }

        let userJid = phoneNumber;
        if (!userJid.includes('@')) {
          let cleaned = phoneNumber.replace(/\D/g, '');

          if (cleaned.length <= 11) {
            cleaned = '55' + cleaned;
          }

          userJid = `${cleaned}@s.whatsapp.net`;
        }

        const userBans = await getUserBanHistory(userJid);

        if (userBans.length === 0) {
          return {
            success: true,
            message: `üìã *Hist√≥rico de Banimentos*\n\nNenhum registro de banimento para o n√∫mero ${phoneNumber}.`,
          };
        }

        let userBanList = `üìã *Hist√≥rico de Banimentos*\n\nüë§ *Usu√°rio:* ${phoneNumber}\n*Total:* ${userBans.length} banimento(s)\n\n`;

        const recentUserBans = userBans.slice(-5).reverse();

        for (const ban of recentUserBans) {
          const adminNumber = ban.executorJid.split('@')[0];

          userBanList += `üìù *Motivo:* ${ban.reason}\nüïí *Data:* ${ban.formattedDate}\nüëÆ *Banido por:* ${adminNumber}\n\n`;
        }

        if (userBans.length > 5) {
          userBanList += `_Mostrando os 5 banimentos mais recentes de ${userBans.length} total._`;
        }

        return {
          success: true,
          message: userBanList,
        };

      case 'total':
      case 'stats':
      case 'estatisticas':
      case 'estat√≠sticas':
        const allBans = await loadBannedUsersList();
        const totalBans = allBans.users.length;

        const uniqueGroups = Object.keys(allBans.groupBans).length;

        const uniqueUsers = new Set(allBans.users.map((ban) => ban.userJid.replace(/:\d+/, ''))).size;

        const userBanCount = {};
        for (const ban of allBans.users) {
          const userJid = ban.userJid.replace(/:\d+/, '');
          userBanCount[userJid] = (userBanCount[userJid] || 0) + 1;
        }

        let mostBannedUser = { jid: null, count: 0 };
        for (const [jid, count] of Object.entries(userBanCount)) {
          if (count > mostBannedUser.count) {
            mostBannedUser = { jid, count };
          }
        }

        let statsMessage = `üìä *Estat√≠sticas de Banimentos*\n\n`;
        statsMessage += `üìã *Total de banimentos:* ${totalBans}\n`;
        statsMessage += `üë• *Grupos com banimentos:* ${uniqueGroups}\n`;
        statsMessage += `üë§ *Usu√°rios banidos (√∫nicos):* ${uniqueUsers}\n`;

        if (mostBannedUser.jid) {
          const userNumber = mostBannedUser.jid.split('@')[0];
          statsMessage += `\nüèÜ *Usu√°rio mais banido:*\nüì± ${userNumber}\nüî¢ ${mostBannedUser.count} banimento(s)`;
        }

        return {
          success: true,
          message: statsMessage,
        };

      default:
        return {
          success: false,
          message: formatErrorMessage('Subcomando inv√°lido', `O subcomando "${subCommand}" n√£o √© reconhecido.`, 'üìã *Comandos dispon√≠veis:*\n‚Ä¢ `grupo` - Lista banimentos do grupo atual\n‚Ä¢ `user n√∫mero` - Busca hist√≥rico de banimento de um usu√°rio\n‚Ä¢ `total` - Estat√≠sticas de banimentos'),
        };
    }
  } catch (error) {
    logger.error('Erro ao processar comando banlist', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: formatErrorMessage('Erro ao listar banimentos', `Ocorreu um erro ao processar o comando: ${error.message}`, null),
    };
  }
};

module.exports = {
  processAddCommand,
  processPromoteCommand,
  processDemoteCommand,
  processSetNameCommand,
  processSetDescCommand,
  processGroupSettingCommand,
  processLinkCommand,
  processEphemeralCommand,
  processAddModeCommand,
  processGroupInfoCommand,
  processBanCommand,
  processBanListCommand,
  loadBannedUsersList,
  saveBannedUsersList,
  addUserToBannedList,
  getGroupBanHistory,
  getUserBanHistory,
  isUserBanned,
};
