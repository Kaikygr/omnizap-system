/**
 * OmniZap Menu Command
 *
 * Comando para exibir o menu de comandos dispon√≠veis no sistema OmniZap
 *
 * @version 1.0.0
 * @author OmniZap Team
 * @license MIT
 */

const logger = require('../../app/utils/logger/loggerModule');
const { formatSuccessMessage } = require('../../app/utils/messageUtils');
const { COMMAND_PREFIX, EMOJIS } = require('../../app/utils/constants');

/**
 * Processa o comando de menu, exibindo todos os comandos dispon√≠veis
 *
 * @param {Object} omniZapClient - Cliente WhatsApp
 * @param {Object} messageInfo - Informa√ß√µes da mensagem
 * @param {String} senderJid - JID do remetente
 * @param {String} groupJid - JID do grupo (pode ser null)
 * @param {String} args - Argumentos do comando
 * @returns {Promise<Object>} - Resultado da opera√ß√£o
 */
const processMenuCommand = async (omniZapClient, messageInfo, senderJid, groupJid, args) => {
  logger.info('Processando comando menu', { senderJid, groupJid, args });

  try {
    // Verifica argumentos para exibir menus espec√≠ficos
    const arg = args ? args.trim().toLowerCase() : '';

    switch (arg) {
      case 'admin':
        return {
          success: true,
          message: buildAdminMenu(),
        };
      case 'sticker':
        return {
          success: true,
          message: buildStickerMenu(),
        };
      default:
        return {
          success: true,
          message: buildMainMenu(),
        };
    }
  } catch (error) {
    logger.error('Erro ao processar comando menu', {
      error: error.message,
      stack: error.stack,
      senderJid,
      groupJid,
      args,
    });

    return {
      success: false,
      message: `${EMOJIS.ERROR} *Erro ao exibir menu*\n\nOcorreu um erro ao processar o comando. Por favor, tente novamente mais tarde.`,
    };
  }
};

/**
 * Constr√≥i o menu principal com todos os comandos dispon√≠veis
 *
 * @returns {String} - Mensagem formatada com o menu principal
 */
const buildMainMenu = () => {
  const prefix = COMMAND_PREFIX;

  return formatSuccessMessage(
    'üìã Menu de Comandos OmniZap',
    'Abaixo est√£o todos os comandos dispon√≠veis no sistema:',
    `*üõ°Ô∏è Comandos de Administra√ß√£o:*
‚Ä¢ \`${prefix}ban\` - Bane usu√°rio do grupo
‚Ä¢ \`${prefix}banlist\` - Lista usu√°rios banidos
‚Ä¢ \`${prefix}add\` - Adiciona usu√°rio ao grupo
‚Ä¢ \`${prefix}promote\` - Promove usu√°rio a admin
‚Ä¢ \`${prefix}demote\` - Remove admin de um usu√°rio
‚Ä¢ \`${prefix}setname\` - Altera nome do grupo
‚Ä¢ \`${prefix}setdesc\` - Altera descri√ß√£o do grupo
‚Ä¢ \`${prefix}group\` - Configura√ß√µes do grupo
‚Ä¢ \`${prefix}ephemeral\` - Mensagens tempor√°rias
‚Ä¢ \`${prefix}addmode\` - Configura modo de entrada
‚Ä¢ \`${prefix}link\` - Obt√©m link do grupo
‚Ä¢ \`${prefix}groupinfo\` - Informa√ß√µes do grupo

*üé≠ Comandos de Stickers:*
‚Ä¢ \`${prefix}sticker\` - Cria sticker de imagem/v√≠deo
‚Ä¢ \`${prefix}pack\` - Gerencia pacotes de stickers
‚Ä¢ \`${prefix}s\` - Atalho para criar sticker

*üîß Outros Comandos:*
‚Ä¢ \`${prefix}menu admin\` - Menu de comandos admin
‚Ä¢ \`${prefix}menu sticker\` - Menu de comandos de stickers

_Desenvolvido por OmniZap Team_`,
  );
};

/**
 * Constr√≥i o menu de comandos de administra√ß√£o
 *
 * @returns {String} - Mensagem formatada com o menu de administra√ß√£o
 */
const buildAdminMenu = () => {
  const prefix = COMMAND_PREFIX;

  return formatSuccessMessage(
    'üõ°Ô∏è Menu de Comandos de Administra√ß√£o',
    'Comandos para gerenciamento de grupos:',
    `*Gerenciamento de Usu√°rios:*
‚Ä¢ \`${prefix}ban <n√∫mero/@men√ß√£o> [motivo]\` - Bane usu√°rio do grupo
‚Ä¢ \`${prefix}banlist\` - Lista usu√°rios banidos
‚Ä¢ \`${prefix}banlist grupo\` - Lista banidos do grupo atual
‚Ä¢ \`${prefix}banlist user <n√∫mero>\` - Hist√≥rico de bans de um usu√°rio
‚Ä¢ \`${prefix}banlist total\` - Estat√≠sticas de banimentos
‚Ä¢ \`${prefix}add <n√∫mero1> [n√∫mero2...]\` - Adiciona usu√°rios ao grupo
‚Ä¢ \`${prefix}promote <@men√ß√£o>\` - Promove usu√°rio a administrador
‚Ä¢ \`${prefix}demote <@men√ß√£o>\` - Remove privil√©gios de administrador

*Configura√ß√µes de Grupo:*
‚Ä¢ \`${prefix}setname <nome>\` - Altera o nome do grupo
‚Ä¢ \`${prefix}setdesc <descri√ß√£o>\` - Altera a descri√ß√£o do grupo
‚Ä¢ \`${prefix}group open/close\` - Abre/fecha o grupo
‚Ä¢ \`${prefix}ephemeral <off/24h/7d/90d>\` - Configura mensagens tempor√°rias
‚Ä¢ \`${prefix}addmode <on/off>\` - Ativa/desativa aprova√ß√£o de entrada
‚Ä¢ \`${prefix}link\` - Obt√©m o link de convite do grupo
‚Ä¢ \`${prefix}groupinfo\` - Exibe informa√ß√µes do grupo

*Observa√ß√µes:*
‚Ä¢ Comandos s√≥ funcionam para administradores do grupo
‚Ä¢ O bot precisa ser administrador para executar a maioria dos comandos

_Use \`${prefix}menu\` para ver todos os comandos dispon√≠veis_`,
  );
};

/**
 * Constr√≥i o menu de comandos de stickers
 *
 * @returns {String} - Mensagem formatada com o menu de stickers
 */
const buildStickerMenu = () => {
  const prefix = COMMAND_PREFIX;

  return formatSuccessMessage(
    'üé≠ Menu de Comandos de Stickers',
    'Comandos para cria√ß√£o e gerenciamento de stickers:',
    `*Criar Stickers:*
‚Ä¢ \`${prefix}sticker\` - Cria sticker da imagem/v√≠deo enviado ou respondido
‚Ä¢ \`${prefix}s\` - Atalho para criar sticker
‚Ä¢ \`${prefix}sticker crop\` - Cria sticker recortado (quadrado)
‚Ä¢ \`${prefix}sticker full\` - Cria sticker sem recorte

*Gerenciar Pacotes:*
‚Ä¢ \`${prefix}pack list\` - Lista seus pacotes de stickers
‚Ä¢ \`${prefix}pack create <nome>\` - Cria um novo pacote
‚Ä¢ \`${prefix}pack info <id>\` - Mostra informa√ß√µes do pacote
‚Ä¢ \`${prefix}pack rename <id> <nome>\` - Renomeia um pacote
‚Ä¢ \`${prefix}pack delete <id>\` - Exclui um pacote
‚Ä¢ \`${prefix}pack author <nome>\` - Define seu nome de autor

*Enviar Stickers:*
‚Ä¢ \`${prefix}pack send <id>\` - Envia todos os stickers do pacote

*Observa√ß√µes:*
‚Ä¢ Tamanho m√°ximo de arquivo: 10MB
‚Ä¢ Formatos suportados: JPEG, PNG, MP4, WEBM
‚Ä¢ V√≠deos ser√£o convertidos para stickers animados

_Use \`${prefix}menu\` para ver todos os comandos dispon√≠veis_`,
  );
};

module.exports = {
  processMenuCommand,
};
